// Generated by gencpp from file monitor_py/all_state.msg
// DO NOT EDIT!


#ifndef MONITOR_PY_MESSAGE_ALL_STATE_H
#define MONITOR_PY_MESSAGE_ALL_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <monitor_py/node_state.h>

namespace monitor_py
{
template <class ContainerAllocator>
struct all_state_
{
  typedef all_state_<ContainerAllocator> Type;

  all_state_()
    : header()
    , states()  {
    }
  all_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , states(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::monitor_py::node_state_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::monitor_py::node_state_<ContainerAllocator> >::other >  _states_type;
  _states_type states;





  typedef boost::shared_ptr< ::monitor_py::all_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitor_py::all_state_<ContainerAllocator> const> ConstPtr;

}; // struct all_state_

typedef ::monitor_py::all_state_<std::allocator<void> > all_state;

typedef boost::shared_ptr< ::monitor_py::all_state > all_statePtr;
typedef boost::shared_ptr< ::monitor_py::all_state const> all_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitor_py::all_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitor_py::all_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace monitor_py

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'monitor_py': ['/home/pigmon/Workspace/Beiqi/gen_watcher/rospy_test/src/gen_watcher/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::monitor_py::all_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_py::all_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_py::all_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_py::all_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_py::all_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_py::all_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitor_py::all_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e8e92ac40aa34df2551f0b3df24250d";
  }

  static const char* value(const ::monitor_py::all_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e8e92ac40aa34dfULL;
  static const uint64_t static_value2 = 0x2551f0b3df24250dULL;
};

template<class ContainerAllocator>
struct DataType< ::monitor_py::all_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_py/all_state";
  }

  static const char* value(const ::monitor_py::all_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitor_py::all_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 所有监控消息\n"
"Header header\n"
"node_state[] states\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: monitor_py/node_state\n"
"# 一个监视消息的数据\n"
"string msg_name\n"
"float64 hz\n"
"float64 hz_min\n"
"float64 hz_max\n"
"string param_name\n"
"float64 param_value\n"
"float64 param_min\n"
"float64 param_max\n"
;
  }

  static const char* value(const ::monitor_py::all_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitor_py::all_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct all_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitor_py::all_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitor_py::all_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::monitor_py::node_state_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITOR_PY_MESSAGE_ALL_STATE_H
