// Generated by gencpp from file monitor_py/node_state.msg
// DO NOT EDIT!


#ifndef MONITOR_PY_MESSAGE_NODE_STATE_H
#define MONITOR_PY_MESSAGE_NODE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace monitor_py
{
template <class ContainerAllocator>
struct node_state_
{
  typedef node_state_<ContainerAllocator> Type;

  node_state_()
    : msg_name()
    , hz(0.0)
    , hz_min(0.0)
    , hz_max(0.0)
    , param_name()
    , param_value(0.0)
    , param_min(0.0)
    , param_max(0.0)  {
    }
  node_state_(const ContainerAllocator& _alloc)
    : msg_name(_alloc)
    , hz(0.0)
    , hz_min(0.0)
    , hz_max(0.0)
    , param_name(_alloc)
    , param_value(0.0)
    , param_min(0.0)
    , param_max(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_name_type;
  _msg_name_type msg_name;

   typedef double _hz_type;
  _hz_type hz;

   typedef double _hz_min_type;
  _hz_min_type hz_min;

   typedef double _hz_max_type;
  _hz_max_type hz_max;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _param_name_type;
  _param_name_type param_name;

   typedef double _param_value_type;
  _param_value_type param_value;

   typedef double _param_min_type;
  _param_min_type param_min;

   typedef double _param_max_type;
  _param_max_type param_max;





  typedef boost::shared_ptr< ::monitor_py::node_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitor_py::node_state_<ContainerAllocator> const> ConstPtr;

}; // struct node_state_

typedef ::monitor_py::node_state_<std::allocator<void> > node_state;

typedef boost::shared_ptr< ::monitor_py::node_state > node_statePtr;
typedef boost::shared_ptr< ::monitor_py::node_state const> node_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitor_py::node_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitor_py::node_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace monitor_py

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'monitor_py': ['/home/pigmon/Workspace/Beiqi/gen_watcher/rospy_test/src/gen_watcher/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::monitor_py::node_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitor_py::node_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_py::node_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitor_py::node_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_py::node_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitor_py::node_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitor_py::node_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d06aaa16cbeab11b30b8b7466c37381a";
  }

  static const char* value(const ::monitor_py::node_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd06aaa16cbeab11bULL;
  static const uint64_t static_value2 = 0x30b8b7466c37381aULL;
};

template<class ContainerAllocator>
struct DataType< ::monitor_py::node_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitor_py/node_state";
  }

  static const char* value(const ::monitor_py::node_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitor_py::node_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 一个监视消息的数据\n"
"string msg_name\n"
"float64 hz\n"
"float64 hz_min\n"
"float64 hz_max\n"
"string param_name\n"
"float64 param_value\n"
"float64 param_min\n"
"float64 param_max\n"
;
  }

  static const char* value(const ::monitor_py::node_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitor_py::node_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_name);
      stream.next(m.hz);
      stream.next(m.hz_min);
      stream.next(m.hz_max);
      stream.next(m.param_name);
      stream.next(m.param_value);
      stream.next(m.param_min);
      stream.next(m.param_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitor_py::node_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitor_py::node_state_<ContainerAllocator>& v)
  {
    s << indent << "msg_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg_name);
    s << indent << "hz: ";
    Printer<double>::stream(s, indent + "  ", v.hz);
    s << indent << "hz_min: ";
    Printer<double>::stream(s, indent + "  ", v.hz_min);
    s << indent << "hz_max: ";
    Printer<double>::stream(s, indent + "  ", v.hz_max);
    s << indent << "param_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param_name);
    s << indent << "param_value: ";
    Printer<double>::stream(s, indent + "  ", v.param_value);
    s << indent << "param_min: ";
    Printer<double>::stream(s, indent + "  ", v.param_min);
    s << indent << "param_max: ";
    Printer<double>::stream(s, indent + "  ", v.param_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITOR_PY_MESSAGE_NODE_STATE_H
